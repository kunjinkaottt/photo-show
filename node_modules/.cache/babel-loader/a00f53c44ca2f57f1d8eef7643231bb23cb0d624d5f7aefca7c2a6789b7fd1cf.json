{"ast":null,"code":"// import axios from 'axios'\n\nexport default {\n  name: 'LocalImg',\n  data() {\n    return {\n      imgList: []\n    };\n  },\n  created() {\n    const files = require.context(\"@/assets/imgs\", true, /\\.*\\.jpg/).keys();\n    this.imgList = files;\n    // var imgsWidth = imgs[0].offsetWidth\n    // console.log(imgsWidth);\n  },\n\n  mounted() {\n    //获取主容器宽度1\n    // var content = document.getElementsByClassName('content')[0]\n    // var contentWidth = content.offsetWidth  \n    //获取主容器宽度2\n    var content = this.$refs.content;\n    var contentWidth = content.offsetWidth;\n    console.log(contentWidth);\n\n    // img标签的dom数组1\n    // var imgs = content.children\n    // var imgWidth = imgs[0].offsetWidth\n    // img标签的dom数组2\n    var imgs = this.$refs.image;\n    var imgWidth = imgs[0].offsetWidth;\n    console.log(imgWidth);\n\n    // 获取第一行的图片整数 \n    var nums = Math.floor(contentWidth / imgWidth);\n    console.log(nums);\n\n    // var firstRowImgsHeight = [] //第一行的高度数组\n    //     for (var i = 0; i < imgs.length; i++) {//imgs.length所有图片的数量\n    //         if (i < nums) { //第一行\n    //             // 获取第一行全部图片的高度 存到数组\n    //             var imgHeight = imgs[i].offsetHeight\n    //             firstRowImgsHeight.push(imgHeight)\n    //         }\n    //         else {  //第二行往后\n    //             var obj = {\n    //                 minHeight: firstRowImgsHeight[0],   //第一行最短的高度\n    //                 minIndex: 0  // 第一行高度最矮的那一项的下标\n    //             }\n    //             for (let j = 0; j < firstRowImgsHeight.length; j++) {\n    //                 if (firstRowImgsHeight[j] < obj.minHeight) {  //找到高度最矮那一项\n    //                     obj.minHeight = firstRowImgsHeight[j]\n    //                     obj.minIndex = j\n    //                 }\n    //             }\n    //             imgs[i].style.position = \"absolute\"\n    //             imgs[i].style.top = obj.minHeight + \"px\"\n    //             imgs[i].style.left = imgs[obj.minIndex].offsetLeft + \"px\"\n    //             firstRowImgsHeight[obj.minIndex] = firstRowImgsHeight[obj.minIndex] + imgs[i].offsetHeight\n    //         }\n    //     }\n  },\n\n  methods: {\n    handleImageLoad() {\n      // console.log($event);\n      const image = this.$refs.image;\n      console.log(image[0].width, image[0].height);\n    }\n  }\n};","map":{"version":3,"names":["name","data","imgList","created","files","require","context","keys","mounted","content","$refs","contentWidth","offsetWidth","console","log","imgs","image","imgWidth","nums","Math","floor","methods","handleImageLoad","width","height"],"sources":["src/components/LocalImg.vue"],"sourcesContent":["<template>\r\n    <div id=\"waterfall\">\r\n\r\n        <div class=\"content\" ref=\"content\">\r\n            <!-- 遍历图片数组获取图片 -->\r\n            <div v-for=\"(item, index) in imgList\" :key=\"index\">\r\n                <img :src=\"require('../assets/imgs' + item.slice(1))\" alt=\"xxx\" ref=\"image\" @load=\"handleImageLoad\"/>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n// import axios from 'axios'\r\n\r\nexport default {\r\n    name: 'LocalImg',\r\n    data() {\r\n        return {\r\n            imgList: [],\r\n        }\r\n    },\r\n    created() {\r\n        const files = require.context(\"@/assets/imgs\", true, /\\.*\\.jpg/).keys();\r\n        this.imgList = files\r\n        // var imgsWidth = imgs[0].offsetWidth\r\n        // console.log(imgsWidth);\r\n    },\r\n    mounted() {\r\n        //获取主容器宽度1\r\n        // var content = document.getElementsByClassName('content')[0]\r\n        // var contentWidth = content.offsetWidth  \r\n//获取主容器宽度2\r\nvar content = this.$refs.content\r\nvar contentWidth =  content.offsetWidth\r\nconsole.log(contentWidth);\r\n\r\n        // img标签的dom数组1\r\n        // var imgs = content.children\r\n        // var imgWidth = imgs[0].offsetWidth\r\n        // img标签的dom数组2\r\n        var imgs = this.$refs.image\r\n        var imgWidth = imgs[0].offsetWidth\r\n        console.log(imgWidth);\r\n\r\n        // 获取第一行的图片整数 \r\n        var nums = Math.floor(contentWidth / imgWidth)\r\n        console.log(nums);\r\n\r\n\r\n        // var firstRowImgsHeight = [] //第一行的高度数组\r\n        //     for (var i = 0; i < imgs.length; i++) {//imgs.length所有图片的数量\r\n        //         if (i < nums) { //第一行\r\n        //             // 获取第一行全部图片的高度 存到数组\r\n        //             var imgHeight = imgs[i].offsetHeight\r\n        //             firstRowImgsHeight.push(imgHeight)\r\n        //         }\r\n        //         else {  //第二行往后\r\n        //             var obj = {\r\n        //                 minHeight: firstRowImgsHeight[0],   //第一行最短的高度\r\n        //                 minIndex: 0  // 第一行高度最矮的那一项的下标\r\n        //             }\r\n        //             for (let j = 0; j < firstRowImgsHeight.length; j++) {\r\n        //                 if (firstRowImgsHeight[j] < obj.minHeight) {  //找到高度最矮那一项\r\n        //                     obj.minHeight = firstRowImgsHeight[j]\r\n        //                     obj.minIndex = j\r\n        //                 }\r\n        //             }\r\n        //             imgs[i].style.position = \"absolute\"\r\n        //             imgs[i].style.top = obj.minHeight + \"px\"\r\n        //             imgs[i].style.left = imgs[obj.minIndex].offsetLeft + \"px\"\r\n        //             firstRowImgsHeight[obj.minIndex] = firstRowImgsHeight[obj.minIndex] + imgs[i].offsetHeight\r\n        //         }\r\n        //     }\r\n\r\n\r\n    },\r\n    methods: {\r\n        handleImageLoad(){\r\n            // console.log($event);\r\n            const image = this.$refs.image\r\n            console.log(image[0].width,image[0].height);\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n#waterfall {\r\n    width: 84.5%;\r\n    margin: 0 auto;\r\n}\r\n\r\n.content {\r\n    width: 100%;\r\n\r\n    div {\r\n        float: left;\r\n        padding: 10px;\r\n\r\n        img {\r\n            float: left;\r\n            width: 300px;\r\n            border-radius: 10px;\r\n            \r\n\r\n        }\r\n    }\r\n\r\n}\r\n</style>"],"mappings":"AAcA;;AAEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,MAAAC,KAAA,GAAAC,OAAA,CAAAC,OAAA,oCAAAC,IAAA;IACA,KAAAL,OAAA,GAAAE,KAAA;IACA;IACA;EACA;;EACAI,QAAA;IACA;IACA;IACA;IACA;IACA,IAAAC,OAAA,QAAAC,KAAA,CAAAD,OAAA;IACA,IAAAE,YAAA,GAAAF,OAAA,CAAAG,WAAA;IACAC,OAAA,CAAAC,GAAA,CAAAH,YAAA;;IAEA;IACA;IACA;IACA;IACA,IAAAI,IAAA,QAAAL,KAAA,CAAAM,KAAA;IACA,IAAAC,QAAA,GAAAF,IAAA,IAAAH,WAAA;IACAC,OAAA,CAAAC,GAAA,CAAAG,QAAA;;IAEA;IACA,IAAAC,IAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAT,YAAA,GAAAM,QAAA;IACAJ,OAAA,CAAAC,GAAA,CAAAI,IAAA;;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAGA;;EACAG,OAAA;IACAC,gBAAA;MACA;MACA,MAAAN,KAAA,QAAAN,KAAA,CAAAM,KAAA;MACAH,OAAA,CAAAC,GAAA,CAAAE,KAAA,IAAAO,KAAA,EAAAP,KAAA,IAAAQ,MAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}