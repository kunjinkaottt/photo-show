{"ast":null,"code":"// import axios from 'axios'\nimport { WaterFall } from \"@/waterfall/waterfall\"; //js那边不是export default默认导出,所以这里要用花括号，不然获取不到\n\nfunction importAll(r) {\n  //导入多个模块\n  return r.keys().map(function (key) {\n    return r(key); //webpack提供的r方法,返回上下文(context)接口的函数。将每个模块都通过r(key)导入进来,将获取的相对路径作为参数传递给 r 函数，并返回导入的模块对象\n  });\n}\n\nexport default {\n  name: 'LocalImg',\n  data() {\n    return {\n      imgList: [],\n      firstRowNums: 0,\n      firstRowImgsHeight: [],\n      columns: 5,\n      timmer: null\n    };\n  },\n  created() {\n    const images = importAll(require.context('@/assets/imgs', false, /\\.(png|jpe?g|svg)$/));\n    console.log(images);\n    this.imgList = images;\n  },\n  mounted() {\n    // 监听窗口大小变化事件，并实时更新数据属性中的宽度和高度值\n    window.onresize = () => {\n      clearTimeout(this.timmer);\n      setTimeout(() => {\n        this.imageOnload();\n      }, 600);\n    };\n  },\n  methods: {\n    handleImageLoad(index) {\n      // //获取主容器宽度\n      // var content = this.$refs.content\n      // var contentWidth = content.offsetWidth\n\n      // // img标签的dom数组\n      // var imgs = this.$refs.image\n      // var imgWidth = imgs[0].offsetWidth\n\n      // // 获取第一行的图片整数 \n      // this.firstRowNums = Math.floor(contentWidth / imgWidth)\n\n      //     const image = this.$refs.image\n      //     if (index < this.firstRowNums) { //第一行\n      //         // 获取第一行全部图片的高度 存到数组\n      //         var imgHeight = image[index].offsetHeight\n      //         this.firstRowImgsHeight.push(imgHeight)\n      //     }\n      //     else if(index > this.firstRowNums){  //第二行往后\n      //         var obj = {\n      //             minHeight: this.firstRowImgsHeight[0],   //第一行最短的高度\n      //             minIndex: 0  // 第一行高度最矮的那一项的下标\n      //         }\n      //         console.log(this.firstRowImgsHeight);\n      //         for (let j = 0; j < this.firstRowImgsHeight.length; j++) {\n      //             if (this.firstRowImgsHeight[j] < obj.minHeight) {  //找到第一行高度最小那一项\n      //                 obj.minHeight = this.firstRowImgsHeight[j]\n      //                 obj.minIndex = j\n      //             }\n      //         }\n      //         image[index].style.position = \"absolute\"\n      //         image[index].style.top = obj.minHeight + \"px\"\n      //         image[index].style.left = image[obj.minIndex].offsetLeft + \"px\"\n      //         this.firstRowImgsHeight[obj.minIndex] = this.firstRowImgsHeight[obj.minIndex] + image[index].height\n      //     }\n    },\n    imageOnload() {\n      //加载图片 根据浏览器宽度决定列数\n      if (window.innerWidth > 1500) {\n        this.columns = 5;\n      } else if (window.innerWidth > 1200) {\n        this.columns = 4;\n      } else if (window.innerWidth > 800) {\n        this.columns = 3;\n      } else if (window.innerWidth >= 500) {\n        this.columns = 2;\n      }\n      new WaterFall({\n        //执行waterfall.js文件中的构造函数\n        el: \".wf-content\",\n        column: this.columns,\n        gap: 30\n      });\n    }\n  }\n};","map":{"version":3,"names":["WaterFall","importAll","r","keys","map","key","name","data","imgList","firstRowNums","firstRowImgsHeight","columns","timmer","created","images","require","context","console","log","mounted","window","onresize","clearTimeout","setTimeout","imageOnload","methods","handleImageLoad","index","innerWidth","el","column","gap"],"sources":["src/components/LocalImg.vue"],"sourcesContent":["<template>\r\n    <div class=\"Waterfall wf-content\"> <!-- 如果不用wf-content？ -->\r\n        <!-- 遍历图片数组获取图片 -->\r\n        <div class=\"wf-item\" v-for=\"(item, index) in imgList\" :key=\"index\">\r\n            <img v-lazy=\"item\" alt=\"xxx\" ref=\"image\" @load=\"imageOnload()\" />\r\n            <!-- <a class=\"collect\"><img src=\"../assets/icons/收藏.png\" alt=\"\"></a> -->\r\n            <a class=\"like\"><img src=\"../assets/icons/赞.png\" alt=\"\"></a>\r\n            <a class=\"download\"><img src=\"../assets/icons/下载.png\" alt=\"\"></a>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n// import axios from 'axios'\r\nimport { WaterFall } from \"@/waterfall/waterfall\";    //js那边不是export default默认导出,所以这里要用花括号，不然获取不到\r\n\r\nfunction importAll(r) {//导入多个模块\r\n    return r.keys().map(function (key) {\r\n        return r(key);//webpack提供的r方法,返回上下文(context)接口的函数。将每个模块都通过r(key)导入进来,将获取的相对路径作为参数传递给 r 函数，并返回导入的模块对象\r\n    });\r\n}\r\n\r\nexport default {\r\n    name: 'LocalImg',\r\n    data() {\r\n        return {\r\n            imgList: [],\r\n            firstRowNums: 0,\r\n            firstRowImgsHeight: [],\r\n            columns: 5,\r\n            timmer: null,\r\n        }\r\n    },\r\n    created() {\r\n        const images = importAll(require.context('@/assets/imgs', false, /\\.(png|jpe?g|svg)$/));\r\n        console.log(images);\r\n        this.imgList = images;\r\n    },\r\n    mounted() {\r\n        // 监听窗口大小变化事件，并实时更新数据属性中的宽度和高度值\r\n        window.onresize = () => {\r\n            clearTimeout(this.timmer)\r\n            setTimeout(() => {\r\n                this.imageOnload()\r\n            }, 600)\r\n        };\r\n    },\r\n    methods: {\r\n        handleImageLoad(index) {\r\n            // //获取主容器宽度\r\n            // var content = this.$refs.content\r\n            // var contentWidth = content.offsetWidth\r\n\r\n            // // img标签的dom数组\r\n            // var imgs = this.$refs.image\r\n            // var imgWidth = imgs[0].offsetWidth\r\n\r\n            // // 获取第一行的图片整数 \r\n            // this.firstRowNums = Math.floor(contentWidth / imgWidth)\r\n\r\n            //     const image = this.$refs.image\r\n            //     if (index < this.firstRowNums) { //第一行\r\n            //         // 获取第一行全部图片的高度 存到数组\r\n            //         var imgHeight = image[index].offsetHeight\r\n            //         this.firstRowImgsHeight.push(imgHeight)\r\n            //     }\r\n            //     else if(index > this.firstRowNums){  //第二行往后\r\n            //         var obj = {\r\n            //             minHeight: this.firstRowImgsHeight[0],   //第一行最短的高度\r\n            //             minIndex: 0  // 第一行高度最矮的那一项的下标\r\n            //         }\r\n            //         console.log(this.firstRowImgsHeight);\r\n            //         for (let j = 0; j < this.firstRowImgsHeight.length; j++) {\r\n            //             if (this.firstRowImgsHeight[j] < obj.minHeight) {  //找到第一行高度最小那一项\r\n            //                 obj.minHeight = this.firstRowImgsHeight[j]\r\n            //                 obj.minIndex = j\r\n            //             }\r\n            //         }\r\n            //         image[index].style.position = \"absolute\"\r\n            //         image[index].style.top = obj.minHeight + \"px\"\r\n            //         image[index].style.left = image[obj.minIndex].offsetLeft + \"px\"\r\n            //         this.firstRowImgsHeight[obj.minIndex] = this.firstRowImgsHeight[obj.minIndex] + image[index].height\r\n            //     }\r\n        },\r\n        imageOnload() { //加载图片 根据浏览器宽度决定列数\r\n            if (window.innerWidth > 1500) {\r\n                this.columns = 5\r\n            } else if (window.innerWidth > 1200) {\r\n                this.columns = 4\r\n            } else if (window.innerWidth > 800) {\r\n                this.columns = 3\r\n            } else if (window.innerWidth >= 500) {\r\n                this.columns = 2\r\n            }\r\n            new WaterFall({ //执行waterfall.js文件中的构造函数\r\n                el: \".wf-content\",\r\n                column: this.columns,\r\n                gap: 30\r\n            })\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.Waterfall {\r\n    position: relative;\r\n    margin: 30px auto 0px;\r\n    // display: flex;\r\n    // flex-wrap: wrap;\r\n    // justify-content: center;\r\n    width: 90%;\r\n\r\n    .wf-item {\r\n        position: absolute;\r\n\r\n        .like {\r\n            display: none;\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n            width: 30px;\r\n            height: 30px;\r\n            // text-align: center;\r\n            // line-height: 30px;\r\n            // border-radius: 7px;\r\n            // background-color: rgba(255, 255, 255, 0.5);\r\n        }\r\n        .download{\r\n            display: none;\r\n            position: absolute;\r\n            bottom: 10px;\r\n            right: 10px;\r\n            width: 30px;\r\n            height: 30px;\r\n        }\r\n\r\n        .like:hover {\r\n            transform: scale(1.1);\r\n        }\r\n    }\r\n\r\n    .wf-item img {\r\n        width: 100%;\r\n        border-radius: 10px;\r\n    }\r\n\r\n    .wf-item:hover {\r\n        transform: scale(1.02);\r\n        cursor: pointer;\r\n    }\r\n\r\n    .wf-item:hover .like .download{\r\n        display: block;\r\n    }\r\n\r\n\r\n}</style>"],"mappings":"AAaA;AACA,SAAAA,SAAA;;AAEA,SAAAC,UAAAC,CAAA;EAAA;EACA,OAAAA,CAAA,CAAAC,IAAA,GAAAC,GAAA,WAAAC,GAAA;IACA,OAAAH,CAAA,CAAAG,GAAA;EACA;AACA;;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,YAAA;MACAC,kBAAA;MACAC,OAAA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACA,MAAAC,MAAA,GAAAb,SAAA,CAAAc,OAAA,CAAAC,OAAA;IACAC,OAAA,CAAAC,GAAA,CAAAJ,MAAA;IACA,KAAAN,OAAA,GAAAM,MAAA;EACA;EACAK,QAAA;IACA;IACAC,MAAA,CAAAC,QAAA;MACAC,YAAA,MAAAV,MAAA;MACAW,UAAA;QACA,KAAAC,WAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,gBAAAC,KAAA;MACA;MACA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACA;IACAH,YAAA;MAAA;MACA,IAAAJ,MAAA,CAAAQ,UAAA;QACA,KAAAjB,OAAA;MACA,WAAAS,MAAA,CAAAQ,UAAA;QACA,KAAAjB,OAAA;MACA,WAAAS,MAAA,CAAAQ,UAAA;QACA,KAAAjB,OAAA;MACA,WAAAS,MAAA,CAAAQ,UAAA;QACA,KAAAjB,OAAA;MACA;MACA,IAAAX,SAAA;QAAA;QACA6B,EAAA;QACAC,MAAA,OAAAnB,OAAA;QACAoB,GAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}