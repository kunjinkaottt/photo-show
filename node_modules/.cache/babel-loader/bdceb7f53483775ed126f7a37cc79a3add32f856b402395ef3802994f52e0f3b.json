{"ast":null,"code":"// import axios from 'axios'\n\nexport default {\n  name: 'LocalImg',\n  data() {\n    return {\n      imgList: [],\n      firstRowNums: 0,\n      firstRowImgsHeight: []\n    };\n  },\n  created() {\n    const files = require.context(\"@/assets/imgs\", true, /\\.*\\.jpg/).keys();\n    this.imgList = files;\n    // var imgsWidth = imgs[0].offsetWidth\n    // console.log(imgsWidth);\n  },\n\n  mounted() {},\n  methods: {\n    handleImageLoad() {\n      // //获取主容器宽度\n      // var content = this.$refs.content\n      // var contentWidth = content.offsetWidth\n\n      // // img标签的dom数组\n      // var imgs = this.$refs.image\n      // var imgWidth = imgs[0].offsetWidth\n\n      // // 获取第一行的图片整数 \n      // this.firstRowNums = Math.floor(contentWidth / imgWidth)\n\n      //     const image = this.$refs.image\n      //     if (index < this.firstRowNums) { //第一行\n      //         // 获取第一行全部图片的高度 存到数组\n      //         var imgHeight = image[index].offsetHeight\n      //         this.firstRowImgsHeight.push(imgHeight)\n      //     }\n      //     else if(index > this.firstRowNums){  //第二行往后\n      //         var obj = {\n      //             minHeight: this.firstRowImgsHeight[0],   //第一行最短的高度\n      //             minIndex: 0  // 第一行高度最矮的那一项的下标\n      //         }\n      //         console.log(this.firstRowImgsHeight);\n      //         for (let j = 0; j < this.firstRowImgsHeight.length; j++) {\n      //             if (this.firstRowImgsHeight[j] < obj.minHeight) {  //找到第一行高度最小那一项\n      //                 obj.minHeight = this.firstRowImgsHeight[j]\n      //                 obj.minIndex = j\n      //             }\n      //         }\n      //         image[index].style.position = \"absolute\"\n      //         image[index].style.top = obj.minHeight + \"px\"\n      //         image[index].style.left = image[obj.minIndex].offsetLeft + \"px\"\n      //         this.firstRowImgsHeight[obj.minIndex] = this.firstRowImgsHeight[obj.minIndex] + image[index].height\n      //     }\n    },\n    initWaterfallLayout() {\n      let waterfall = this.$elquerySelector('.waterfall');\n      let items = this.$el.querySelectorAll('.waterfall-item');\n      let columnCount = 3;\n      let columnHeights = new Array(columnCount).fill(0);\n      items.forEach(item => {\n        let minIndex = 0;\n        columnHeights.forEach((height, i) => {\n          if (columnHeights[minIndex] > height) {\n            minIndex = i;\n          }\n        });\n        item.style.top = columnHeights[minIndex] + 'px';\n        item.style.left = waterfall.clientwidth / columnCount * minIndex + 'px';\n        columnHeights[minIndex] += item.offsetHeight;\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","imgList","firstRowNums","firstRowImgsHeight","created","files","require","context","keys","mounted","methods","handleImageLoad","initWaterfallLayout","waterfall","$elquerySelector","items","$el","querySelectorAll","columnCount","columnHeights","Array","fill","forEach","item","minIndex","height","i","style","top","left","clientwidth","offsetHeight"],"sources":["src/components/LocalImg.vue"],"sourcesContent":["<template>\r\n    <div class=\"waterfall\">\r\n        <!-- 遍历图片数组获取图片 -->\r\n        <div v-for=\"(item, index) in imgList\" :key=\"index\" class=\"waterfall-item\">\r\n            <img :src=\"require('../assets/imgs' + item.slice(1))\" alt=\"xxx\" ref=\"image\" @load=\"handleImageLoad()\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n// import axios from 'axios'\r\n\r\nexport default {\r\n    name: 'LocalImg',\r\n    data() {\r\n        return {\r\n            imgList: [],\r\n            firstRowNums: 0,\r\n            firstRowImgsHeight: [],\r\n\r\n        }\r\n    },\r\n    created() {\r\n        const files = require.context(\"@/assets/imgs\", true, /\\.*\\.jpg/).keys();\r\n        this.imgList = files\r\n        // var imgsWidth = imgs[0].offsetWidth\r\n        // console.log(imgsWidth);\r\n    },\r\n    mounted() {\r\n\r\n    },\r\n    methods: {\r\n        handleImageLoad() {\r\n            // //获取主容器宽度\r\n            // var content = this.$refs.content\r\n            // var contentWidth = content.offsetWidth\r\n\r\n            // // img标签的dom数组\r\n            // var imgs = this.$refs.image\r\n            // var imgWidth = imgs[0].offsetWidth\r\n\r\n            // // 获取第一行的图片整数 \r\n            // this.firstRowNums = Math.floor(contentWidth / imgWidth)\r\n\r\n            //     const image = this.$refs.image\r\n            //     if (index < this.firstRowNums) { //第一行\r\n            //         // 获取第一行全部图片的高度 存到数组\r\n            //         var imgHeight = image[index].offsetHeight\r\n            //         this.firstRowImgsHeight.push(imgHeight)\r\n            //     }\r\n            //     else if(index > this.firstRowNums){  //第二行往后\r\n            //         var obj = {\r\n            //             minHeight: this.firstRowImgsHeight[0],   //第一行最短的高度\r\n            //             minIndex: 0  // 第一行高度最矮的那一项的下标\r\n            //         }\r\n            //         console.log(this.firstRowImgsHeight);\r\n            //         for (let j = 0; j < this.firstRowImgsHeight.length; j++) {\r\n            //             if (this.firstRowImgsHeight[j] < obj.minHeight) {  //找到第一行高度最小那一项\r\n            //                 obj.minHeight = this.firstRowImgsHeight[j]\r\n            //                 obj.minIndex = j\r\n            //             }\r\n            //         }\r\n            //         image[index].style.position = \"absolute\"\r\n            //         image[index].style.top = obj.minHeight + \"px\"\r\n            //         image[index].style.left = image[obj.minIndex].offsetLeft + \"px\"\r\n            //         this.firstRowImgsHeight[obj.minIndex] = this.firstRowImgsHeight[obj.minIndex] + image[index].height\r\n            //     }\r\n        },\r\n        initWaterfallLayout() {\r\n            let waterfall = this.$elquerySelector('.waterfall');\r\n            let items = this.$el.querySelectorAll('.waterfall-item');\r\n            let columnCount = 3;\r\n            let columnHeights = new Array(columnCount).fill(0);\r\n\r\n            items.forEach((item) => {\r\n                let minIndex = 0;\r\n                 columnHeights.forEach((height, i) => {\r\n                    if (columnHeights[minIndex] > height) {\r\n                        minIndex = i;\r\n                    }\r\n                })\r\n                    item.style.top = columnHeights[minIndex] + 'px';\r\n                    item.style.left = (waterfall.clientwidth / columnCount) * minIndex + 'px';\r\n                    columnHeights[minIndex] += item.offsetHeight;\r\n                })\r\n            }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n\r\n.waterfall {\r\n    position: relative;\r\n}\r\n\r\n.waterfall-item {\r\n    position: absolute;\r\n    // width: calc(100% / 3);\r\n\r\n    /* 设置元素大小和外边距等 */\r\n    img {\r\n        width: 300px;\r\n        border-radius: 10px;\r\n    }\r\n}\r\n</style>"],"mappings":"AAUA;;AAEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,YAAA;MACAC,kBAAA;IAEA;EACA;EACAC,QAAA;IACA,MAAAC,KAAA,GAAAC,OAAA,CAAAC,OAAA,oCAAAC,IAAA;IACA,KAAAP,OAAA,GAAAI,KAAA;IACA;IACA;EACA;;EACAI,QAAA,GAEA;EACAC,OAAA;IACAC,gBAAA;MACA;MACA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACA;IACAC,oBAAA;MACA,IAAAC,SAAA,QAAAC,gBAAA;MACA,IAAAC,KAAA,QAAAC,GAAA,CAAAC,gBAAA;MACA,IAAAC,WAAA;MACA,IAAAC,aAAA,OAAAC,KAAA,CAAAF,WAAA,EAAAG,IAAA;MAEAN,KAAA,CAAAO,OAAA,CAAAC,IAAA;QACA,IAAAC,QAAA;QACAL,aAAA,CAAAG,OAAA,EAAAG,MAAA,EAAAC,CAAA;UACA,IAAAP,aAAA,CAAAK,QAAA,IAAAC,MAAA;YACAD,QAAA,GAAAE,CAAA;UACA;QACA;QACAH,IAAA,CAAAI,KAAA,CAAAC,GAAA,GAAAT,aAAA,CAAAK,QAAA;QACAD,IAAA,CAAAI,KAAA,CAAAE,IAAA,GAAAhB,SAAA,CAAAiB,WAAA,GAAAZ,WAAA,GAAAM,QAAA;QACAL,aAAA,CAAAK,QAAA,KAAAD,IAAA,CAAAQ,YAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}