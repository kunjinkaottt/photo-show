{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import axios from 'axios'\n\nexport default {\n  name: 'LocalImg',\n  data() {\n    return {\n      imgList: [],\n      firstRowNums: 0,\n      firstRowImgsHeight: [],\n      obj: {\n        minHeight: 1000,\n        //第一行最短的高度\n        minIndex: 0 // 第一行高度最矮的那一项的下标\n      }\n    };\n  },\n\n  created() {\n    const files = require.context(\"@/assets/imgs\", true, /\\.*\\.jpg/).keys();\n    this.imgList = files;\n    // var imgsWidth = imgs[0].offsetWidth\n    // console.log(imgsWidth);\n  },\n\n  mounted() {\n    //获取主容器宽度1\n    // var content = document.getElementsByClassName('content')[0]\n    // var contentWidth = content.offsetWidth  \n    //获取主容器宽度2\n    var content = this.$refs.content;\n    var contentWidth = content.offsetWidth;\n    console.log(contentWidth);\n\n    // img标签的dom数组1\n    // var imgs = content.children\n    // var imgWidth = imgs[0].offsetWidth\n    // img标签的dom数组2\n    var imgs = this.$refs.image;\n    var imgWidth = imgs[0].offsetWidth;\n    console.log(imgWidth);\n\n    // 获取第一行的图片整数 \n    this.firstRowNums = Math.floor(contentWidth / imgWidth);\n    console.log(this.firstRowNums);\n\n    // var firstRowImgsHeight = [] //第一行的高度数组\n    // for (var i = 0; i < imgs.length; i++) {//imgs.length所有图片的数量\n\n    // }\n  },\n\n  methods: {\n    handleImageLoad(index) {\n      const image = this.$refs.image;\n      if (index < this.firstRowNums) {\n        //第一行\n        // 获取第一行全部图片的高度 存到数组\n        var imgHeight = image[index].offsetHeight;\n        this.firstRowImgsHeight.push(imgHeight);\n      } else {\n        //第二行往后\n        for (let j = 0; j < this.firstRowImgsHeight.length; j++) {\n          if (this.firstRowImgsHeight[j] < this.obj.minHeight) {\n            //找到第一行高度最小那一项\n            this.obj.minHeight = this.firstRowImgsHeight[j];\n            this.obj.minIndex = j;\n          }\n        }\n      }\n      image[index].style.position = \"absolute\";\n      image[index].style.top = this.obj.minHeight + \"px\";\n      image[index].style.left = image[this.obj.minIndex].offsetLeft + \"px\";\n      this.firstRowImgsHeight[this.obj.minIndex] = this.firstRowImgsHeight[this.obj.minIndex] + image[index].height;\n    }\n  }\n};","map":{"version":3,"names":["name","data","imgList","firstRowNums","firstRowImgsHeight","obj","minHeight","minIndex","created","files","require","context","keys","mounted","content","$refs","contentWidth","offsetWidth","console","log","imgs","image","imgWidth","Math","floor","methods","handleImageLoad","index","imgHeight","offsetHeight","push","j","length","style","position","top","left","offsetLeft","height"],"sources":["src/components/LocalImg.vue"],"sourcesContent":["<template>\r\n    <div id=\"waterfall\">\r\n\r\n        <div class=\"content\" ref=\"content\">\r\n            <!-- 遍历图片数组获取图片 -->\r\n            <div v-for=\"(item, index) in imgList\" :key=\"index\">\r\n                <img :src=\"require('../assets/imgs' + item.slice(1))\" alt=\"xxx\" ref=\"image\"\r\n                    @load=\"handleImageLoad(index)\" />\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n// import axios from 'axios'\r\n\r\nexport default {\r\n    name: 'LocalImg',\r\n    data() {\r\n        return {\r\n            imgList: [],\r\n            firstRowNums: 0,\r\n            firstRowImgsHeight: [],\r\n            obj: {\r\n                minHeight: 1000,   //第一行最短的高度\r\n                minIndex: 0  // 第一行高度最矮的那一项的下标\r\n            }\r\n        }\r\n    },\r\n    created() {\r\n        const files = require.context(\"@/assets/imgs\", true, /\\.*\\.jpg/).keys();\r\n        this.imgList = files\r\n        // var imgsWidth = imgs[0].offsetWidth\r\n        // console.log(imgsWidth);\r\n    },\r\n    mounted() {\r\n        //获取主容器宽度1\r\n        // var content = document.getElementsByClassName('content')[0]\r\n        // var contentWidth = content.offsetWidth  \r\n        //获取主容器宽度2\r\n        var content = this.$refs.content\r\n        var contentWidth = content.offsetWidth\r\n        console.log(contentWidth);\r\n\r\n        // img标签的dom数组1\r\n        // var imgs = content.children\r\n        // var imgWidth = imgs[0].offsetWidth\r\n        // img标签的dom数组2\r\n        var imgs = this.$refs.image\r\n        var imgWidth = imgs[0].offsetWidth\r\n        console.log(imgWidth);\r\n\r\n        // 获取第一行的图片整数 \r\n        this.firstRowNums = Math.floor(contentWidth / imgWidth)\r\n        console.log(this.firstRowNums);\r\n\r\n\r\n        // var firstRowImgsHeight = [] //第一行的高度数组\r\n        // for (var i = 0; i < imgs.length; i++) {//imgs.length所有图片的数量\r\n            \r\n        // }\r\n\r\n\r\n    },\r\n    methods: {\r\n        handleImageLoad(index) {\r\n            const image = this.$refs.image\r\n            if (index < this.firstRowNums) { //第一行\r\n                // 获取第一行全部图片的高度 存到数组\r\n                var imgHeight = image[index].offsetHeight\r\n                this.firstRowImgsHeight.push(imgHeight)\r\n            } else {  //第二行往后\r\n                for (let j = 0; j < this.firstRowImgsHeight.length; j++) {\r\n                    if (this.firstRowImgsHeight[j] < this.obj.minHeight) {  //找到第一行高度最小那一项\r\n                        this.obj.minHeight = this.firstRowImgsHeight[j]\r\n                        this.obj.minIndex = j\r\n                    }\r\n                }\r\n\r\n            }\r\n            \r\n            image[index].style.position = \"absolute\"\r\n            image[index].style.top = this.obj.minHeight + \"px\"\r\n            image[index].style.left = image[this.obj.minIndex].offsetLeft + \"px\"\r\n            this.firstRowImgsHeight[this.obj.minIndex] = this.firstRowImgsHeight[this.obj.minIndex] + image[index].height\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n#waterfall {\r\n    width: 84.5%;\r\n    margin: 0 auto;\r\n}\r\n\r\n.content {\r\n    width: 100%;\r\n\r\n    div {\r\n        float: left;\r\n        padding: 10px;\r\n\r\n        img {\r\n            width: 300px;\r\n            border-radius: 10px;\r\n\r\n        }\r\n    }\r\n\r\n}\r\n</style>"],"mappings":";AAeA;;AAEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,YAAA;MACAC,kBAAA;MACAC,GAAA;QACAC,SAAA;QAAA;QACAC,QAAA;MACA;IACA;EACA;;EACAC,QAAA;IACA,MAAAC,KAAA,GAAAC,OAAA,CAAAC,OAAA,oCAAAC,IAAA;IACA,KAAAV,OAAA,GAAAO,KAAA;IACA;IACA;EACA;;EACAI,QAAA;IACA;IACA;IACA;IACA;IACA,IAAAC,OAAA,QAAAC,KAAA,CAAAD,OAAA;IACA,IAAAE,YAAA,GAAAF,OAAA,CAAAG,WAAA;IACAC,OAAA,CAAAC,GAAA,CAAAH,YAAA;;IAEA;IACA;IACA;IACA;IACA,IAAAI,IAAA,QAAAL,KAAA,CAAAM,KAAA;IACA,IAAAC,QAAA,GAAAF,IAAA,IAAAH,WAAA;IACAC,OAAA,CAAAC,GAAA,CAAAG,QAAA;;IAEA;IACA,KAAAnB,YAAA,GAAAoB,IAAA,CAAAC,KAAA,CAAAR,YAAA,GAAAM,QAAA;IACAJ,OAAA,CAAAC,GAAA,MAAAhB,YAAA;;IAGA;IACA;;IAEA;EAGA;;EACAsB,OAAA;IACAC,gBAAAC,KAAA;MACA,MAAAN,KAAA,QAAAN,KAAA,CAAAM,KAAA;MACA,IAAAM,KAAA,QAAAxB,YAAA;QAAA;QACA;QACA,IAAAyB,SAAA,GAAAP,KAAA,CAAAM,KAAA,EAAAE,YAAA;QACA,KAAAzB,kBAAA,CAAA0B,IAAA,CAAAF,SAAA;MACA;QAAA;QACA,SAAAG,CAAA,MAAAA,CAAA,QAAA3B,kBAAA,CAAA4B,MAAA,EAAAD,CAAA;UACA,SAAA3B,kBAAA,CAAA2B,CAAA,SAAA1B,GAAA,CAAAC,SAAA;YAAA;YACA,KAAAD,GAAA,CAAAC,SAAA,QAAAF,kBAAA,CAAA2B,CAAA;YACA,KAAA1B,GAAA,CAAAE,QAAA,GAAAwB,CAAA;UACA;QACA;MAEA;MAEAV,KAAA,CAAAM,KAAA,EAAAM,KAAA,CAAAC,QAAA;MACAb,KAAA,CAAAM,KAAA,EAAAM,KAAA,CAAAE,GAAA,QAAA9B,GAAA,CAAAC,SAAA;MACAe,KAAA,CAAAM,KAAA,EAAAM,KAAA,CAAAG,IAAA,GAAAf,KAAA,MAAAhB,GAAA,CAAAE,QAAA,EAAA8B,UAAA;MACA,KAAAjC,kBAAA,MAAAC,GAAA,CAAAE,QAAA,SAAAH,kBAAA,MAAAC,GAAA,CAAAE,QAAA,IAAAc,KAAA,CAAAM,KAAA,EAAAW,MAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}